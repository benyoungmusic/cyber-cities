/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/asset_drawing.js":
/*!******************************!*\
  !*** ./src/asset_drawing.js ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Structure)\n/* harmony export */ });\n// rectangle examples:\n\nclass Structure {\n  constructor(params) {\n    this.params = params;\n    this.x = this.params.x;\n    this.y = this.params.y;\n    this.height = this.params.height;\n    this.width = this.params.width;\n    this.ctx = params.ctx\n    this.bloomctx = params.bloomctx\n  }\n\n  drawRect(ctx, center, width, height) {\n    ctx.strokeStyle = 'rgb(75, 255, 255)';\n    // ctx.strokeRect(center[0] - width/2, center[1] - height/2, width, height); // outline of a rectangle\n    ctx.strokeRect(center[0], center[1], width, height); // outline of a rectangle\n\n    // this.bloomctx.lineWidth = 6\n    // this.bloomctx.strokeStyle = 'rgb(75, 255, 255)';\n    // this.bloomctx.strokeRect(center[0] - width/2, center[1] - height/2, width, height); // outline of a rectangle\n  }\n\n\n\n  drawRects(ctx, center, width, height) {\n    this.drawRect(ctx, center, width, height)\n    ctx.translate(center[0], center[1]);\n    ctx.rotate(Math.PI / 4);\n    ctx.translate(-1 * center[0], -1 * center[1]);\n    this.drawRect(ctx, center, width, height)\n    ctx.translate(center[0], center[1]);\n    ctx.rotate(Math.PI / 4);\n    ctx.translate(-1 * center[0], -1 * center[1]);\n    this.drawRect(ctx, center, width, height);\n    ctx.translate(center[0], center[1]);\n    ctx.rotate(Math.PI / 4);\n    ctx.translate(-1 * center[0], -1 * center[1]);\n    this.drawRect(ctx, center, width, height)\n    // ctx.translate(center[0], center[1]);\n    // ctx.rotate(Math.PI / 6);\n    // ctx.translate(-1 * center[0], -1 * center[1]);\n    // this.drawRect(ctx, center, width, height)\n    // ctx.translate(center[0], center[1]);\n    // ctx.rotate(Math.PI / 6);\n    // ctx.translate(-1 * center[0], -1 * center[1]);\n    // this.drawRect(ctx, center, width, height)\n    ctx.setTransform(1, 0, 0, 1, 0, 0);\n  }\n\n  drawBase(center = [260, 200], lineWidth = 3) {\n    this.ctx.strokeStyle = 'rgb(75, 255, 255)';\n    this.ctx.lineWidth = lineWidth;\n    this.drawThreeEights(this.ctx, center)\n    this.bloomctx.lineWidth = 4.8;\n    this.bloomctx.strokeStyle = 'rgb(75, 255, 255)';\n    this.drawThreeEights(this.bloomctx, center)\n  }\n\n  drawThreeEights(ctx, center = [260, 200], size = [50, 30]) {\n    this.drawEight(ctx, center, size);\n    ctx.translate(center[0], center[1]);\n    ctx.rotate(Math.PI / 3);\n    ctx.translate(-1 * center[0], -1 * center[1]);\n    this.drawEight(ctx, center, size);\n    ctx.translate(center[0], center[1]);\n    ctx.rotate(Math.PI / 3);\n    ctx.translate(-1 * center[0], -1 * center[1]);\n    this.drawEight(ctx, center, size);\n    ctx.setTransform(1, 0, 0, 1, 0, 0);\n  }\n\n  drawTriangleBase(start = [100, 100], ctx = this.ctx) {\n    ctx.strokeStyle = 'rgb(75, 255, 255)';\n    ctx.lineWidth = 2;\n    this.drawTriangles(ctx, start);\n    this.bloomctx.lineWidth = 3;\n    this.bloomctx.strokeStyle = 'rgb(75, 255, 255)';\n    this.drawTriangles(this.bloomctx, start)\n  }\n\n  drawTriangles(ctx = this.ctx, start = [100, 100]) {\n    // this.drawTriangle(ctx, start)\n    // ctx.translate(start[0], start[1]);\n    // ctx.rotate(Math.PI / 2);\n    // ctx.translate(-1 * start[0], -1 * start[1]);\n    // this.drawTriangle(ctx, start)\n    // ctx.translate(start[0], start[1]);\n    // ctx.rotate(Math.PI / 2);\n    // ctx.translate(-1 * start[0], -1 * start[1]);\n    // this.drawTriangle(ctx, start)\n    // ctx.translate(start[0], start[1]);\n    // ctx.rotate(Math.PI / 2);\n    // ctx.translate(-1 * start[0], -1 * start[1]);\n    // this.drawTriangle(ctx, start)\n    // ctx.translate(start[0], start[1]);\n    // ctx.rotate(Math.PI / 3);\n    // ctx.translate(-1 * start[0], -1 * start[1]);\n    this.drawTriangle(ctx, [start[0] - 20, start[1] -12])\n    ctx.translate(start[0], start[1]);\n    ctx.rotate(Math.PI / 2);\n    ctx.translate(-1 * start[0], -1 * start[1]);\n    this.drawTriangle(ctx, [start[0] - 20, start[1] -12])\n    ctx.translate(start[0], start[1]);\n    ctx.rotate(Math.PI / 2);\n    ctx.translate(-1 * start[0], -1 * start[1]);\n    this.drawTriangle(ctx, [start[0] - 20, start[1] -12])\n    ctx.translate(start[0], start[1]);\n    ctx.rotate(Math.PI / 2);\n    ctx.translate(-1 * start[0], -1 * start[1]);\n    this.drawTriangle(ctx, [start[0] - 20, start[1] -12])\n\n    ctx.setTransform(1, 0, 0, 1, 0, 0);\n  }\n\n  drawUpgradedTriangles(ctx = this.ctx, start = [100, 100]) {\n    this.drawTriangle(ctx, start)\n    ctx.translate(start[0], start[1]);\n    ctx.rotate(Math.PI / 2);\n    ctx.translate(-1 * start[0], -1 * start[1]);\n    this.drawTriangle(ctx, start)\n    ctx.translate(start[0], start[1]);\n    ctx.rotate(Math.PI / 2);\n    ctx.translate(-1 * start[0], -1 * start[1]);\n    this.drawTriangle(ctx, start)\n    ctx.translate(start[0], start[1]);\n    ctx.rotate(Math.PI / 2);\n    ctx.translate(-1 * start[0], -1 * start[1]);\n    this.drawTriangle(ctx, start)\n    ctx.translate(start[0], start[1]);\n    ctx.rotate(Math.PI / 3);\n    ctx.translate(-1 * start[0], -1 * start[1]);\n    this.drawTriangle(ctx, [start[0] - 20, start[1] -12])\n    ctx.translate(start[0], start[1]);\n    ctx.rotate(Math.PI / 2);\n    ctx.translate(-1 * start[0], -1 * start[1]);\n    this.drawTriangle(ctx, [start[0] - 20, start[1] -12])\n    ctx.translate(start[0], start[1]);\n    ctx.rotate(Math.PI / 2);\n    ctx.translate(-1 * start[0], -1 * start[1]);\n    this.drawTriangle(ctx, [start[0] - 20, start[1] -12])\n    ctx.translate(start[0], start[1]);\n    ctx.rotate(Math.PI / 2);\n    ctx.translate(-1 * start[0], -1 * start[1]);\n    this.drawTriangle(ctx, [start[0] - 20, start[1] -12])\n\n    ctx.setTransform(1, 0, 0, 1, 0, 0);\n  }\n\n  drawRedRoad(start = [100, 100], finish = [200, 200], ctx = this.ctx) {\n    ctx.beginPath();\n    ctx.lineWidth = 5;\n    ctx.strokeStyle = 'rgb(255, 0, 0)';\n    ctx.moveTo(start[0], start[1]);\n    ctx.lineTo(finish[0], finish[1]);\n    ctx.stroke();\n    ctx.closePath();\n    this.bloomctx.beginPath();\n    this.bloomctx.lineWidth = 7;\n    this.bloomctx.strokeStyle = 'rgb(255, 0, 0)';\n    this.bloomctx.moveTo(start[0], start[1]);\n    this.bloomctx.lineTo(finish[0], finish[1]);\n    this.bloomctx.stroke();\n    this.bloomctx.closePath();\n  }\n\n    drawGreenRoad(start = [100, 100], finish = [200, 200], ctx = this.ctx) {\n    ctx.beginPath();\n    ctx.lineWidth = 5;\n    ctx.strokeStyle = 'rgb(0, 255, 0)';\n    ctx.moveTo(start[0], start[1]);\n    ctx.lineTo(finish[0], finish[1]);\n    ctx.stroke();\n    ctx.closePath();\n    this.bloomctx.beginPath();\n    this.bloomctx.lineWidth = 7;\n    this.bloomctx.strokeStyle = 'rgb(0, 255, 0)';\n    this.bloomctx.moveTo(start[0], start[1]);\n    this.bloomctx.lineTo(finish[0], finish[1]);\n    this.bloomctx.stroke();\n    this.bloomctx.closePath();\n  }\n\n  drawTriangle(ctx = this.ctx, start = [400, 400]) {\n    ctx.beginPath();\n    ctx.moveTo(start[0], start[1]);\n    ctx.lineTo(start[0] + 20, start[1]);\n    ctx.lineTo(start[0] + 9, start[1] + 10);\n    ctx.lineTo(start[0], start[1]);\n    ctx.stroke();\n  }\n\n  drawEight(ctx, center = [260, 200], size = [50, 30]) {\n    let centerX = center[0];\n    let centerY = center[1];\n    let sizeX = size[0];\n    let sizeY = size[1];\n    //\n    // this.ctx.rotate(45 * Math.PI / 180)\n    // ctx.strokeStyle = 'red';\n    ctx.beginPath();\n    ctx.arc(\n      centerX - sizeX/(10/3),\n      centerY,\n      sizeY/2,\n      .5 * Math.PI,\n      1.5 * Math.PI\n    );\n    ctx.quadraticCurveTo(\n      centerX - sizeX/(20/3),\n      centerY - sizeY/2,\n      centerX,\n      centerY\n    );\n    ctx.quadraticCurveTo(\n      centerX + sizeX/(20/3),\n      centerY + sizeY/2,\n      centerX + sizeX/(10/3),\n      centerY + sizeY/2,\n    );\n    ctx.arc(\n      centerX + sizeX / (10/3),\n      centerY,\n      sizeY/2,\n      .5 * Math.PI,\n      1.5 * Math.PI,\n      true\n    );\n    ctx.quadraticCurveTo(\n      centerX + sizeX/(20/3),\n      centerY - sizeY/2,\n      centerX,\n      centerY\n    );\n    ctx.quadraticCurveTo(\n      centerX - sizeX/(20/3),\n      centerY + sizeY/2,\n      centerX - sizeX/(10/3),\n      centerY + sizeY/2,\n    );\n    ctx.stroke();\n    ctx.closePath();\n  }\n\n  bloom() {\n    const scale = 50;\n    const alpha = 0.3;\n    this.drawRect(this.bloomctx, 6)\n  }\n}\n\n\n\n  //arc params:\n  // x: The horizontal coordinate of the arc's center.\n  // y: The vertical coordinate of the arc's center.\n  // radius: The arc's radius. Must be positive.\n  // startAngle: The angle at which the arc starts in radians, measured from the positive x-axis. \n  // endAngle:The angle at which the arc ends in radians, measured from the positive x-axis.\n  // optional: counterclockwise\n\n  //quardraticCurveParams:\n  // cpx\n  //     The x-axis coordinate of the control point.\n  // cpy\n  //     The y-axis coordinate of the control point.\n  // x\n  //     The x-axis coordinate of the end point.\n  // y\n  //     The y-axis coordinate of the end point.\n\n//# sourceURL=webpack:///./src/asset_drawing.js?");

/***/ }),

/***/ "./src/building_bar.js":
/*!*****************************!*\
  !*** ./src/building_bar.js ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ BuildingBar)\n/* harmony export */ });\n/* harmony import */ var _asset_drawing__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./asset_drawing */ \"./src/asset_drawing.js\");\n\n\nclass BuildingBar {\n  constructor(ctx, screenSize, buildingBloom) {\n    this.screenSizeX = screenSize[0];\n    this.screenSizeY = screenSize[1];\n    this.x = screenSize[0]/8;\n    this.y = screenSize[1] - 2;\n    this.x2 = screenSize[0] - this.x;\n    this.y2 = screenSize[1]*(5/6);\n    this.x3 = this.x * (7/8);\n    this.x4 = this.screenSizeX - this.x3;\n    this.ctx = ctx;\n    this.bloomCtx = buildingBloom;\n  }\n\n  drawBuildingBar(ctx, bloomCtx) {\n    this.buildingBarOutline();\n    this.eightBase = new _asset_drawing__WEBPACK_IMPORTED_MODULE_0__.default({\n      x: 150,\n      y: 150,\n      height: 50,\n      width: 50,\n      ctx: ctx,\n      bloomctx: bloomCtx });\n    this.eightBase.drawBase([this.screenSizeX/5, this.screenSizeY * (11/12)]);\n    this.eightBase.drawTriangleBase([this.screenSizeX * 2/5, this.screenSizeY * (11/12)], this.ctx);\n    this.eightBase.drawRedRoad([this.screenSizeX * 14/20, this.screenSizeY * (11/12)], [this.screenSizeX * 16/20, this.screenSizeY * (11/12)], this.ctx);\n    this.eightBase.drawGreenRoad([this.screenSizeX * 11/20, this.screenSizeY * (11/12)], [this.screenSizeX * 13/20, this.screenSizeY * (11/12)], this.ctx);\n  }\n\n  buildingBarOutline() {\n    this.bloomCtx.strokeStyle = 'rgb(100, 120, 0)';\n    this.bloomCtx.lineWidth = 9;\n    this.bloomCtx.beginPath();\n    this.bloomCtx.moveTo(this.x, this.y);\n    this.bloomCtx.lineTo(this.x3, this.y2);\n    this.bloomCtx.lineTo(this.x4, this.y2);\n    this.bloomCtx.lineTo(this.x2, this.y);\n    this.bloomCtx.lineTo(this.x, this.y);\n    this.bloomCtx.stroke();\n\n    this.ctx.strokeStyle = 'rgb(100, 120, 0)';\n    this.ctx.lineWidth = 4;\n    this.ctx.beginPath();\n    this.ctx.moveTo(this.x, this.y);\n    this.ctx.lineTo(this.x3, this.y2);\n    this.ctx.lineTo(this.x4, this.y2);\n    this.ctx.lineTo(this.x2, this.y);\n    this.ctx.fillStyle = 'rgb(45, 50, 65)';\n    this.ctx.lineTo(this.x, this.y);\n    this.ctx.fill();\n    this.ctx.stroke();\n  }\n}\n\n//# sourceURL=webpack:///./src/building_bar.js?");

/***/ }),

/***/ "./src/game_view.js":
/*!**************************!*\
  !*** ./src/game_view.js ***!
  \**************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ CityBuilder)\n/* harmony export */ });\n/* harmony import */ var _asset_drawing__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./asset_drawing */ \"./src/asset_drawing.js\");\n/* harmony import */ var _building_bar__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./building_bar */ \"./src/building_bar.js\");\n\n\n\nclass CityBuilder {\n  constructor(canvas, bloom, dragCanvas, buildingBar, buildingBarBloom, buildingIcons) {\n  canvas.width = 1000;\n  this.screenWidth = 1000;\n  canvas.height = 600;\n  this.screenHeight = 600;\n  bloom.width = 1000;\n  bloom.height = 600;\n  buildingBar.width = 1000;\n  buildingBar.height = 600;\n  buildingBarBloom.width = 1000;\n  buildingBarBloom.height = 600;\n  buildingIcons.width = 1000;\n  buildingIcons.height = 600;\n  const ctx = canvas.getContext('2d');\n  this.ctx = ctx;\n  this.buildingBarCtx = buildingBar.getContext('2d');\n  this.buildingBloom = buildingBarBloom.getContext('2d')\n  this.buildingIcons = buildingIcons.getContext('2d')\n  this.offsetX = 0;\n  this.offsetY = 0;\n  this.canvas = canvas;\n  this.bloom = bloom;\n  this.drawingRoad = false;\n  this.navStructures = {\n    base: {\n      center: [this.screenWidth/5, this.screenHeight * (11/12)],\n      radius: this.screenWidth/50\n    },\n    building: {\n      start: [this.screenWidth * 2/5, this.screenHeight * (11/12)]\n    },\n    redRoad: {\n      start: [this.screenWidth * 14/20, this.screenHeight * (11/12)],\n      end: [this.screenWidth * 16/20, this.screenHeight * (11/12)]\n    }\n  }\n  this.structures = {\n    base: [],\n    building: [],\n    redRoad: [],\n    greenRoad: []\n  }\n  this.dragCanvas = dragCanvas;\n  this.dragCtx = dragCanvas.getContext('2d');\n  // window.ctx = ctx;\n  this.dimensions = { width: canvas.width, height: canvas.height };\n  this.bloomctx = bloom.getContext('2d')\n  // this.mouseStuff()\n  this.start();\n\n  this.baseOnMouseMove = this.baseOnMouseMove.bind(this);\n  this.baseOnMouseUp = this.baseOnMouseUp.bind(this);\n  this.buildingOnMouseMove = this.buildingOnMouseMove.bind(this);\n  this.buildingOnMouseUp = this.buildingOnMouseUp.bind(this);\n  this.redRoadOnMouseMove1 = this.redRoadOnMouseMove1.bind(this);\n  }\n\n\n  \n  start() {\n    this.drawBackground(this.ctx)\n    this.buildingBar = new _building_bar__WEBPACK_IMPORTED_MODULE_1__.default(\n      this.buildingBarCtx, [this.screenWidth, this.screenHeight],\n      this.bloomctx\n      );\n    this.buildingBar.drawBuildingBar(this.buildingIcons, this.buildingBloom);\n    this.firstStructure = new _asset_drawing__WEBPACK_IMPORTED_MODULE_0__.default({\n      x: 150,\n      y: 150,\n      height: 50,\n      width: 50,\n      ctx: this.ctx,\n      bloomctx: this.bloomctx })\n    // this.firstStructure.drawRects(this.ctx, [460, 200], 50, 20)\n    // this.firstStructure.drawRect(this.buildingIcons, [this.screenWidth * 14/20 - 10, this.screenHeight * (11/12) - 10], this.screenWidth * 2/20 + 20, 20)\n    // this.firstStructure.drawTriangleBase()\n    // this.firstStructure.drawBase();\n    // this.draw();\n    this.newMouseStuff();\n  }\n\n  drawBackground(ctx) {\n    ctx.strokeStyle = 'black';\n    ctx.fillRect(0, 0, canvas.width, canvas.height);\n  }\n\n  animate() {\n    \n\n  }\n\n\n\n\n\n  circleCollision(point1, point2, radius) {\n      if (Math.sqrt((point1[0] - point2[0])*(point1[0] - point2[0])\n      + (point1[1] - point2[1])*(point1[1] - point2[1])) < radius) {\n        return true;\n      }\n  }\n\n  newMouseStuff() {\n    document.body.addEventListener(\"mousedown\", e => {\n      let focus;\n      if (this.circleCollision(\n        this.navStructures.base.center, [e.clientX, e.clientY],\n        this.navStructures.base.radius)\n        ) {\n          this.offsetX = e.clientX - this.navStructures.base.center[0];\n          this.offsetY = e.clientY - this.navStructures.base.center[1];\n          document.body.addEventListener(\"mousemove\", this.baseOnMouseMove);\n          document.body.addEventListener(\"mouseup\", this.baseOnMouseUp);\n          this.structures.base.push(this.navStructures.base.center);\n        } else if (e.clientX > this.navStructures.building.start[0] - 20 &&\n                    e.clientX < this.navStructures.building.start[0] + 20 &&\n                    e.clientY > this.navStructures.building.start[1] - 20 &&\n                    e.clientY < this.navStructures.building.start[1] + 20         \n        ) {\n          console.log(\"building\")\n          this.offsetX = e.clientX - this.navStructures.building.start[0];\n          this.offsetY = e.clientY - this.navStructures.building.start[1];\n          document.body.addEventListener(\"mousemove\", this.buildingOnMouseMove)\n          document.body.addEventListener(\"mouseup\", this.buildingOnMouseUp)\n          this.structures.building.push(this.navStructures.building.start)          \n        } else if (e.clientX > this.navStructures.redRoad.start[0] - 10 &&\n                    e.clientX < this.navStructures.redRoad.end[0] + 10 &&\n                    e.clientY > this.navStructures.redRoad.start[1] - 10 &&\n                    e.clientY < this.navStructures.redRoad.end[1] + 10) {\n          this.drawingRoad = true;\n          this.structures.redRoad.push([[e.clientX, e.clientY], [e.clientX, e.clientY]]);\n          document.body.addEventListener(\"mousemove\", this.redRoadOnMouseMove1)\n        }\n    })\n    \n  }\n//[this.screenWidth * 14/20 - 10, this.screenHeight * (11/12) - 10], this.screenWidth * 2/20 + 20, 20\n  baseOnMouseMove(e) {\n    this.structures.base[this.structures.building.length - 1] = \n      [e.clientX - this.offsetX, e.clientY - this.offsetY];\n    this.draw();\n  }\n\n  buildingOnMouseMove(e) {\n    this.structures.building[this.structures.building.length - 1] = \n      [e.clientX - this.offsetX, e.clientY - this.offsetY];\n    this.draw();\n  }\n\n  redRoadOnMouseMove1(e) {\n    this.structures.redRoad[this.structures.redRoad.length - 1] = \n      [[e.clientX, e.clientY], [e.clientX, e.clientY]];\n    this.draw();\n  }\n\n  baseOnMouseUp(e) {\n    console.log(\"mouseup\")\n    document.body.removeEventListener(\"mousemove\", this.baseOnMouseMove)\n    document.body.removeEventListener(\"mouseup\", this.baseOnMouseUp) \n  }\n\n  buildingOnMouseUp(e) {\n    console.log(\"mouseup\")\n    document.body.removeEventListener(\"mousemove\", this.buildingOnMouseMove)\n    document.body.removeEventListener(\"mouseup\", this.buildingOnMouseUp) \n  }\n\n  redRoadOnMouseDown(e) {\n    \n  }\n  \n  draw() {\n    this.dragCtx.clearRect(0, 0, this.canvas.width, this.canvas.height)\n    this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height)\n    this.bloomctx.clearRect(0, 0, this.canvas.width, this.canvas.height)\n    this.drawBackground(this.ctx);\n    this.firstStructure.drawBase(this.navStructures.base.center);\n    this.firstStructure.drawTriangleBase(this.navStructures.building.start);\n    this.structures.base.forEach(center => this.firstStructure.drawBase(center));\n    // console.log(this.structures.base)\n    this.structures.building.forEach(start => this.firstStructure.drawTriangleBase(start));\n    // console.log(this.structures.building)\n    this.structures.redRoad.forEach(coords => this.firstStructure.drawRedRoad(coords[0], coords[1]));\n    // console.log(this.structures.redRoad)\n  }\n\n\n}\n\n//# sourceURL=webpack:///./src/game_view.js?");

/***/ }),

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _asset_drawing__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./asset_drawing */ \"./src/asset_drawing.js\");\n/* harmony import */ var _game_view__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./game_view */ \"./src/game_view.js\");\n\n\n\nconsole.log(\"webpack is working\")\ndocument.addEventListener(\"DOMContentLoaded\", function(){\n  const canvas = document.getElementById('canvas');\n  const bloom = document.getElementById('bloom');\n  const dragCanvas = document.getElementById('drag-canvas');\n  const buildingBar = document.getElementById('building-bar');\n  const buildingBarBloom = document.getElementById('building-bar-bloom');\n  const buildingIcons = document.getElementById('building-icons');\n  new _game_view__WEBPACK_IMPORTED_MODULE_1__.default(canvas, bloom, dragCanvas, buildingBar, buildingBarBloom, buildingIcons);\n  \n})\n\n//# sourceURL=webpack:///./src/index.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/index.js");
/******/ 	
/******/ })()
;